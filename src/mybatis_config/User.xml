<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">
	<!-- 查询用户信息 -->
	<!-- CDATA:处理的是小于/小于等于符号（”<“/”<=“）与XML的尖括号”<“之间的冲突 -->
	<select id="findUser" parameterType="user" resultType="user">
		select userId,userName,password,userType,u.roleId,r.roleName,userDescription 
		from user u left join role r on u.roleId = r.roleId where 1 = 1
		<!-- 使用if 实现模糊查询-->
		<if test="userName != null and '' != userName">  
            <![CDATA[  
              AND userName like '%' #{userName} '%'  
            ]]>  
        </if>
        <if test="roleId!=null and roleId!=-1">  
            <![CDATA[  
              AND u.roleId = #{roleId}   
            ]]>  
        </if>
        <!-- 分页 -->
		<if test="page != null and rows != null" >           
              limit #{page}, #{rows} 
        </if>
	</select>

    <!-- 查询用户信息总数 -->
	<select id="countUser" parameterType="user" resultType="int">
		select count(*) from user u left join role r on u.roleId = r.roleId where 1 = 1
		<if test="userName != null and '' != userName">  
            <![CDATA[  
              AND userName like '%' #{userName} '%'  
            ]]>  
        </if>
         <if test="roleId!=null and roleId!=-1">  
            <![CDATA[  
              AND u.roleId = #{roleId}   
            ]]>  
        </if>
	</select>
	
	<!-- 根据用户Id查询用户信息 -->
	<select id="findOneUser" parameterType="Integer" resultType="user">
		select userId,userName,password,userType,roleId,userDescription from user
		<where>userId=#{userId}</where>
	</select>
	
	<!-- 添加用户信息 -->
	<insert id="addUser" parameterType="user" >
		insert user(userName,password,userType,roleId,userDescription) 
		values (#{userName},#{password},2,#{roleId},#{userDescription})
	</insert>
	
	<!-- 修改用户信息 -->
	<!-- 使用if+trim实现更新操作 -->
	<!-- suffixOverrides：对trim包含内容尾部的覆盖(忽略) -->
	<!-- 等价于: update user set userName=#{userName},password=#{password},
	userType=#{userType},roleId=#{roleId},userDescription=#{userDescription}
	where userId=#{userId} -->
	<update id="updateUser" parameterType="user">
    	update user set
    	<trim suffixOverrides=",">
			<if test="userName!=null">userName=#{userName},</if>
			<if test="password!=null">password=#{password},</if>
			<if test="userType!=null">userType=#{userType},</if>
			<if test="roleId!=null">roleId=#{roleId},</if>
			<if test="userDescription!=null">userDescription=#{userDescription},</if>
		</trim>
		<where>userId=#{userId}</where>
    </update>
	
	<!-- 删除单个用户信息 -->
	<delete id="deleteUser" parameterType="Integer">
		delete from user 
		<where>userId=#{userId}</where>
	</delete>
	
	<!-- 根据用户名和密码查询用户信息 -->
	<select id="loginUser" parameterType="Map" resultType="user">
		select userId,userName,password,userType,roleId,userDescription from user
		where userName=#{userName} and password=#{password}
	</select>
	
	<!-- 根据用户名查询用户是否存在 -->
	<select id="existUserWithUserName" parameterType="String" resultType="user">
		select userId,userName,password,userType,roleId,userDescription from user
		where userName=#{userName}
	</select>
	
	<!-- 查询角色下存不存在用户 -->
	<select id="existUserWithRoleId" parameterType="Integer" resultType="user">
		select userId,userName,password,userType,roleId,userDescription from user
		where roleId=#{roleId} limit 0,1
	</select>
	
	
	
</mapper>
